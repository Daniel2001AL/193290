# PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-vol
  namespace: daniel2-namespace
spec:
  storageClassName: sc-postgres
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/postgres-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
  namespace: daniel2-namespace
spec:
  storageClassName: sc-postgres
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-postgres
  namespace: daniel2-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-postgres
  namespace: daniel2-namespace
data:
  postgres.user: postgres
  postgres.password: 130801
  postgres.db: postgresdb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: daniel2-namespace
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11
        name: postgres-db1
        ports:
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume1
        env:
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.user
          - name: POSTGRES_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.password
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: cm-postgres
                key: postgres.db
      volumes:
      - name: postgres-db-volume1
        persistentVolumeClaim:
           claimName: pvc-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: daniel2-namespace
spec:
  selector:
    app: postgres-server
  ports:
    - port: 5300
      targetPort: 5432
  type: LoadBalancer
---

# MongoDB
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-vol1
  namespace: daniel2-namespace
spec:
  storageClassName: sc-mongo
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongo
  namespace: daniel2-namespace
spec:
  storageClassName: sc-mongo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mongo
  namespace: daniel2-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-mongo
  namespace: daniel2-namespace
data:
  mongo.user: root
  mongo.password: 132719
  mongo.db: mongodb
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: daniel2-namespace
  labels:
    app: mongo-server
spec:
  selector:
    matchLabels:
      app: mongo-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-server
    spec:
      containers:
      - image: mongo
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/mongodb/data
          name: mongo-db-volume1
        env:
          - name: MONGO_INITDB_ROOT_USERNAME
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.user
          - name: MONGO_INITDB_ROOT_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.password
          - name: MONGO_INITDB_DATABASE
            valueFrom:
              configMapKeyRef:
                name: cm-mongo
                key: mongo.db
      volumes:
      - name: mongo-db-volume1
        persistentVolumeClaim:
           claimName: pvc-mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: daniel2-namespace
spec:
  selector:
    app: mongo-server
  ports:
    - port: 5302
      targetPort: 27017
  type: LoadBalancer
---

# Redis
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-vol1
  namespace: daniel2-namespace
spec:
  storageClassName: sc-redis
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/redis-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
  namespace: daniel2-namespace
spec:
  storageClassName: sc-redis
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-redis
  namespace: daniel2-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-redis
  namespace: daniel2-namespace
data:
  redis.password: redis2021
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: daniel2-namespace
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP
        volumeMounts:
        - mountPath: /var/lib/redis
          name: redis-db-volume1
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: cm-redis
                key: redis.password
      volumes:
      - name: redis-db-volume1
        persistentVolumeClaim:
           claimName: pvc-redis
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: daniel2-namespace
spec:
  selector:
    app: redis-server
  ports:
    - port: 5301
      targetPort: 6379
  type: LoadBalancer
---

# MySQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-vol1
  namespace: daniel2-namespace
spec:
  storageClassName: sc-mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql-vol1"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
  namespace: daniel2-namespace
spec:
  storageClassName: sc-mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: sc-mysql
  namespace: daniel2-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---